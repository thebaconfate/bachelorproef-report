@online{placeholder,
  author = {placeholder}
}

@online{cloudcomputingenergycrisis,
  author = {Mark Pesce},
  title  = {Cloud Computing’s Coming Energy Crisis},
  url    = {https://spectrum.ieee.org/cloud-computings-coming-energy-crisis},
  year   = {2021}
}

@article{datavolumeeffects,
  author  = {Lorincz J. and Klarin, Z.},
  year    = {2021},
  title   = {How Trend of Increasing Data Volume Affects the Energy Efficiency of 5G Networks},
  journal = {Sensors (Basel, Switzerland)},
  doi     = {https://doi.org/10.3390/s22010255}
}

@online{differentnetworkneedsiot,
  author  = {Patrick Grossetete},
  title   = {IoT and the Network: What is the future?},
  url     = {https://blogs.cisco.com/networking/iot-and-the-network-what-is-the-future},
  year    = {2020},
  journal = {Cisco Blogs}
}

@inproceedings{MPI,
  author    = {},
  booktitle = {Supercomputing '93:Proceedings of the 1993 ACM/IEEE Conference on Supercomputing},
  title     = {MPI: A message passing interface},
  year      = {1993},
  volume    = {},
  number    = {},
  pages     = {878-883},
  keywords  = {Message passing;Concurrent computing;Computer interfaces;Europe;Application software;Standardization;Context;Network topology;Computer networks;Distributed computing},
  doi       = {10.1145/169627.169855}
}

@article{RPC,
  author     = {Tay, B. H. and Ananda, A. L.},
  title      = {A survey of remote procedure calls},
  year       = {1990},
  issue_date = {July 1990},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {24},
  number     = {3},
  issn       = {0163-5980},
  url        = {https://doi.org/10.1145/382244.382832},
  doi        = {10.1145/382244.382832},
  abstract   = {The Remote Procedure Call (RPC) is a popular paradigm for inter-process communication (IPC) between processes in different computers across the network. It is widely used in various Distributed Systems. Although it is conceptually simple and straightforward to implement, there are a lot of different and subtle issues involved which result different RPC implementations. In this paper, various distinctive RPC implementations are surveyed, analyzed and compared: Xerox Courier RPC, Xerox Cedar RPC, Sun ONC/RPC, Apollo NCA/RPC, Cambridge Mayflower Project RPC, MIT Athena Project RPC, Stanford Modula/V RPC, and Rajdoot RPC are presented. The design objectives, features provided, call semantics, orphan treatment, binding, transport protocols supported, security/authentication, data representation and application programming interface of these RPCs are examined.},
  journal    = {SIGOPS Oper. Syst. Rev.},
  pages      = {68–79},
  numpages   = {12}
}


@article{SMM,
  title    = {Power and limits of distributed computing shared memory models},
  journal  = {Theoretical Computer Science},
  volume   = {509},
  pages    = {3-24},
  year     = {2013},
  note     = {Structural Information and Communication Complexity},
  issn     = {0304-3975},
  doi      = {https://doi.org/10.1016/j.tcs.2013.03.002},
  url      = {https://www.sciencedirect.com/science/article/pii/S0304397513001813},
  author   = {Maurice Herlihy and Sergio Rajsbaum and Michel Raynal},
  keywords = {Adversary, Agreement, Asynchronous system, Borowsky–Gafni (BG) simulation, Concurrency, Crash failure, Distributed computability, Distributed computing model, Failure detector, Fault-tolerance, Iterated model, Liveness, Model equivalence, Recursion, Resilience, Shared memory system, Snapshot, Task, Topology, Wait-freedom},
  abstract = {What can and cannot be computed in a distributed system is a complex function of the system’s communication model, timing model, and failure model. Considering a canonical distributed system model, where processes execute asynchronously, communicate by reading and writing shared memory, and fail by crashing, this paper surveys important results about computability, and explains the fundamental role that topology plays in the distributed computability theory. The paper also considers different types of additional assumptions that allow impossibility results to be circumvented. These assumptions are known under the names failure detectors and adversaries. Finally, it presents a powerful simulation technique (known under the name BG simulation), which allows to show that, from a computability point of view, t-resilience is not different from wait-freedom. When pieced together, the aim of all the concepts, notions, models, and algorithms presented in the paper, is to provide the reader with a synthetic view of important results on the distributed asynchronous read/write shared-memory model, its power and its limits.}
}

@misc{ActorModel,
  title         = {Actor Model of Computation: Scalable Robust Information Systems},
  author        = {Carl Hewitt},
  year          = {2015},
  eprint        = {1008.1459},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL}
}

@article{owid-energy-mix,
  author  = {Hannah Ritchie and Pablo Rosado},
  title   = {Energy Mix},
  journal = {Our World in Data},
  year    = {2020},
  note    = {https://ourworldindata.org/energy-mix}
}

@article{RATHEESH,
  title    = {Traffic based power consumption and node deployment in green LTE-A cellular networks},
  journal  = {Ad Hoc Networks},
  volume   = {149},
  pages    = {103248},
  year     = {2023},
  issn     = {1570-8705},
  doi      = {https://doi.org/10.1016/j.adhoc.2023.103248},
  url      = {https://www.sciencedirect.com/science/article/pii/S1570870523001683},
  author   = {R. Ratheesh and M. Saranya Nair and M. Edwin and N.V.S. Sree Rathna Lakshmi},
  keywords = {Power allocation, Water filling, Traffic estimation, Coverage ratio, RS deployment, Green communication}
}

@online{PubSub,
  author  = {Wei-Tsung Lin and Rich Wolski and Chandra Krintz},
  title   = {A Programmable and Reliable Publish/Subscribe System for Multi-Tier IoT},
  url     = {https://sites.cs.ucsb.edu/~ckrintz/papers/canal21.pdf},
  journal = {University of California, Santa Barbara}
}